#!/usr/bin/env python3
"""
Script de test pour les services distribu√©s
Teste le calcul des contraintes et la g√©n√©ration du planning
"""

import requests
import json
from datetime import datetime

# Configuration des services
CONSTRAINT_SERVICE_URL = "http://localhost:5001"
PLANNING_SERVICE_URL = "http://localhost:5002"

# Donn√©es de test
test_employees = [
    {
        "_id": "test_emp_1",
        "name": "Ana√Øs Test",
        "age": 17,
        "weeklyHours": 35,
        "skills": ["vendeuse"],
        "trainingDays": ["Mercredi"],
        "sickLeave": {
            "isOnSickLeave": False
        }
    },
    {
        "_id": "test_emp_2", 
        "name": "Vanessa Test",
        "age": 18,
        "weeklyHours": 39,
        "skills": ["manager", "ouverture", "fermeture"],
        "trainingDays": [],
        "sickLeave": {
            "isOnSickLeave": True,
            "startDate": "2025-08-24T00:00:00Z",
            "endDate": "2025-09-07T00:00:00Z"
        }
    }
]

def test_constraint_calculator():
    """Teste le service de calcul des contraintes"""
    print("üßÆ Test du Service Constraint Calculator...")
    
    try:
        # Test health check
        health_response = requests.get(f"{CONSTRAINT_SERVICE_URL}/health")
        if health_response.status_code == 200:
            print("‚úÖ Health check OK")
        else:
            print(f"‚ùå Health check √©chou√©: {health_response.status_code}")
            return False
        
        # Test calcul des contraintes
        constraints_data = {
            "employees": test_employees,
            "week_number": 36,
            "year": 2025
        }
        
        constraints_response = requests.post(
            f"{CONSTRAINT_SERVICE_URL}/calculate-constraints",
            json=constraints_data,
            headers={'Content-Type': 'application/json'}
        )
        
        if constraints_response.status_code == 200:
            result = constraints_response.json()
            print("‚úÖ Calcul des contraintes r√©ussi")
            print(f"   - {len(result['constraints'])} contraintes calcul√©es")
            
            # Afficher les contraintes
            for constraint in result['constraints']:
                print(f"   - {constraint['name']}: {constraint['total_available_days']} jours disponibles")
                if constraint['constraints']:
                    print(f"     Contraintes: {constraint['constraints']}")
            
            return True
        else:
            print(f"‚ùå Calcul des contraintes √©chou√©: {constraints_response.status_code}")
            print(f"   Erreur: {constraints_response.text}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter au service constraint-calculator")
        print("   V√©rifiez qu'il est d√©marr√© sur le port 5001")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def test_planning_generator():
    """Teste le service de g√©n√©ration du planning"""
    print("\nüöÄ Test du Service Planning Generator...")
    
    try:
        # Test health check
        health_response = requests.get(f"{PLANNING_SERVICE_URL}/health")
        if health_response.status_code == 200:
            print("‚úÖ Health check OK")
        else:
            print(f"‚ùå Health check √©chou√©: {health_response.status_code}")
            return False
        
        # Test g√©n√©ration du planning
        planning_data = {
            "employees": test_employees,
            "week_number": 36,
            "year": 2025,
            "affluences": [2, 2, 2, 2, 2, 2, 2]  # Affluence faible tous les jours
        }
        
        planning_response = requests.post(
            f"{PLANNING_SERVICE_URL}/generate-planning",
            json=planning_data,
            headers={'Content-Type': 'application/json'}
        )
        
        if planning_response.status_code == 200:
            result = planning_response.json()
            print("‚úÖ G√©n√©ration du planning r√©ussie")
            print(f"   - Statut solveur: {result.get('solver_status', 'N/A')}")
            print(f"   - Temps de r√©solution: {result.get('solve_time', 'N/A')}s")
            
            if 'planning' in result:
                print("   - Planning g√©n√©r√©:")
                for emp_id, schedule in result['planning'].items():
                    emp_name = next((emp['name'] for emp in test_employees if str(emp['_id']) == emp_id), emp_id)
                    print(f"     {emp_name}: {schedule}")
            
            return True
        else:
            print(f"‚ùå G√©n√©ration du planning √©chou√©e: {planning_response.status_code}")
            print(f"   Erreur: {planning_response.text}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter au service planning-generator")
        print("   V√©rifiez qu'il est d√©marr√© sur le port 5002")
        return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üß™ TEST DES SERVICES DISTRIBU√âS")
    print("=" * 50)
    
    # Test des deux services
    constraint_ok = test_constraint_calculator()
    planning_ok = test_planning_generator()
    
    print("\n" + "=" * 50)
    print("üìä R√âSULTATS DES TESTS")
    print("=" * 50)
    
    if constraint_ok and planning_ok:
        print("üéâ TOUS LES TESTS SONT PASS√âS !")
        print("‚úÖ Les services distribu√©s fonctionnent correctement")
        print("üöÄ Pr√™t pour le d√©ploiement sur Render")
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        if not constraint_ok:
            print("   - Service Constraint Calculator: ‚ùå")
        if not planning_ok:
            print("   - Service Planning Generator: ‚ùå")
        print("\nüîß V√©rifiez que les services sont d√©marr√©s et accessibles")
    
    print("\nüìã PROCHAINES √âTAPES:")
    print("1. D√©marrer constraint-calculator: python constraint-calculator.py")
    print("2. D√©marrer planning-generator: python planning-generator.py")
    print("3. Relancer ce script de test")
    print("4. D√©ployer sur Render avec les fichiers .yaml")

if __name__ == "__main__":
    main()
