from flask import Flask, request, jsonify
from flask_cors import CORS
from ortools.sat.python import cp_model
import json
import os
import logging
from datetime import datetime, timedelta

# Configuration Flask
app = Flask(__name__)
CORS(app, origins="*")

# Configuration des logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PlanningBoulangerieSolver:
    def __init__(self):
        self.model = cp_model.CpModel()
        self.solver = cp_model.CpSolver()
        self.solver.parameters.max_time_in_seconds = 60.0
        self.weekend_history = {}  # Historique des weekends travaill√©s
        
    def calculate_weekend_frequencies(self, employees, week_number, weekend_history=None):
        """
        Calculer les fr√©quences de travail samedi/dimanche pass√©es pour √©quilibrer
        """
        logger.info("üìä Calcul des fr√©quences de travail weekend")
        
        if weekend_history is None:
            weekend_history = {}
        
        weekend_scores = {}
        for emp in employees:
            emp_id = str(emp['id'])
            # Utiliser l'historique fourni ou valeurs par d√©faut
            saturday_count = weekend_history.get(f"{emp_id}_saturday", 0)
            sunday_count = weekend_history.get(f"{emp_id}_sunday", 0)
            
            # Score : plus le score est √©lev√©, plus l'employ√© a travaill√© les weekends
            weekend_scores[emp_id] = {
                'saturday_count': saturday_count,
                'sunday_count': sunday_count,
                'total_weekend': saturday_count + sunday_count
            }
            
            logger.info(f"üë§ {emp['name']}: {saturday_count} samedis, {sunday_count} dimanches")
        
        return weekend_scores
    
    def adjust_weekly_hours_and_balance(self, solution, employees, slot_hours):
        """
        Ajuster les heures r√©glementaires et √©quilibrer selon l'affluence
        """
        logger.info("‚öñÔ∏è Ajustement des heures r√©glementaires et √©quilibrage")
        
        adjusted_solution = {}
        
        for emp in employees:
            emp_id = str(emp['id'])
            if emp_id not in solution:
                continue
                
            target_hours = emp['volume']
            current_schedule = solution[emp_id]
            
            # Calculer les heures actuelles
            current_hours = 0
            work_days = 0
            for day in range(7):
                slot = current_schedule.get(day, 'Repos')
                if slot != 'Repos' and slot not in ['MAL', 'Formation', 'CP']:
                    current_hours += slot_hours.get(slot, 0)
                    work_days += 1
            
            logger.info(f"üë§ {emp['name']}: {current_hours}h r√©alis√©es sur {target_hours}h contractuelles")
            
            # Calculer l'√©cart √† r√©partir
            hour_difference = target_hours - current_hours
            
            if abs(hour_difference) > 0.5 and work_days > 0:  # Tol√©rance de 0.5h
                # R√©partir l'√©cart sur les jours de travail
                daily_adjustment = hour_difference / work_days
                
                logger.info(f"üìä {emp['name']}: √âcart de {hour_difference:.1f}h √† r√©partir sur {work_days} jours")
                logger.info(f"üîß Ajustement par jour: {daily_adjustment:.2f}h")
                
                # Appliquer l'ajustement en modifiant les cr√©neaux
                adjusted_schedule = {}
                for day in range(7):
                    original_slot = current_schedule.get(day, 'Repos')
                    
                    if original_slot != 'Repos' and original_slot not in ['MAL', 'Formation', 'CP']:
                        # Ajuster le cr√©neau
                        adjusted_slot = self.adjust_time_slot(original_slot, daily_adjustment, slot_hours)
                        adjusted_schedule[day] = adjusted_slot
                        logger.info(f"üìÖ Jour {day}: {original_slot} ‚Üí {adjusted_slot}")
                    else:
                        adjusted_schedule[day] = original_slot
                
                adjusted_solution[emp_id] = adjusted_schedule
            else:
                # Pas d'ajustement n√©cessaire
                adjusted_solution[emp_id] = current_schedule
                logger.info(f"‚úÖ {emp['name']}: Pas d'ajustement n√©cessaire")
        
        return adjusted_solution
    
    def adjust_time_slot(self, original_slot, adjustment_hours, slot_hours):
        """
        Ajuster un cr√©neau horaire selon l'ajustement n√©cessaire
        """
        if adjustment_hours > 0:
            # Ajouter du temps (par exemple +30 minutes)
            if '06h00' in original_slot:
                return original_slot.replace('14h00', '14h30')  # +30 min
            elif '07h30' in original_slot:
                return original_slot.replace('15h30', '16h00')  # +30 min
            elif '11h00' in original_slot:
                return original_slot.replace('19h00', '19h30')  # +30 min
            elif '12h00' in original_slot:
                return original_slot.replace('20h00', '20h30')  # +30 min
            elif '13h00' in original_slot:
                return original_slot.replace('20h30', '21h00')  # +30 min
        else:
            # R√©duire le temps (par exemple -15 minutes)
            if '06h00' in original_slot:
                return original_slot.replace('14h00', '13h45')  # -15 min
            elif '07h30' in original_slot:
                return original_slot.replace('15h30', '15h15')  # -15 min
            elif '11h00' in original_slot:
                return original_slot.replace('19h00', '18h45')  # -15 min
            elif '12h00' in original_slot:
                return original_slot.replace('20h00', '19h45')  # -15 min
            elif '13h00' in original_slot:
                return original_slot.replace('20h30', '20h15')  # -15 min
        
        # Si pas de correspondance, retourner le cr√©neau original
        return original_slot
    
    def categorize_employees_by_groups(self, employees):
        """
        Classer les salari√©s par groupes de comp√©tences
        """
        logger.info("üë• Classification des employ√©s par groupes")
        
        groups = {
            'ouverture': [],
            'fermeture': [],
            'vente': []
        }
        
        for emp in employees:
            emp_id = str(emp['id'])
            skills = emp.get('skills', [])
            
            if 'Ouverture' in skills:
                groups['ouverture'].append(emp)
                logger.info(f"üåÖ {emp['name']} ‚Üí Groupe ouverture")
            elif 'Fermeture' in skills:
                groups['fermeture'].append(emp)
                logger.info(f"üåô {emp['name']} ‚Üí Groupe fermeture")
            else:
                groups['vente'].append(emp)
                logger.info(f"üõí {emp['name']} ‚Üí Groupe vente")
        
        return groups
    
    def calculate_group_availability(self, groups, constraints, week_number):
        """
        Calculer les disponibilit√©s des groupes pour la semaine
        """
        logger.info("üìã Calcul des disponibilit√©s par groupe")
        
        group_availability = {}
        days = 7
        
        for group_name, employees in groups.items():
            total_availability = 0
            available_employees = []
            
            logger.info(f"üìä Groupe {group_name}: {len(employees)} employ√©s")
            
            for emp in employees:
                emp_id = str(emp['id'])
                emp_availability = 0
                
                # Calculer disponibilit√© = 5j - contraintes (cp, maladie, formation, ...)
                work_days_possible = 0
                
                for day in range(days):
                    # V√©rifier s'il y a une contrainte ce jour-l√†
                    has_constraint = False
                    if emp_id in constraints and str(day) in constraints[emp_id]:
                        constraint = constraints[emp_id][str(day)]
                        if constraint in ['CP', 'MAL', 'Formation', 'Indisponible', 'Repos']:
                            has_constraint = True
                    
                    # Les mineurs ne travaillent pas le dimanche
                    if emp.get('status') == 'Mineur' and day == 6:  # Dimanche
                        has_constraint = True
                    
                    if not has_constraint:
                        work_days_possible += 1
                
                emp_availability = work_days_possible
                total_availability += emp_availability
                
                available_employees.append({
                    'employee': emp,
                    'availability': emp_availability
                })
                
                logger.info(f"üë§ {emp['name']}: {emp_availability} jours disponibles")
            
            group_availability[group_name] = {
                'total_availability': total_availability,
                'employees': available_employees,
                'avg_availability': total_availability / len(employees) if employees else 0
            }
            
            logger.info(f"üìà Groupe {group_name}: {total_availability} jours total disponibles")
        
        return group_availability
    
    def distribute_opening_closing_shifts(self, group_availability, affluences):
        """
        R√©partir les ouvertures et fermetures selon les disponibilit√©s
        """
        logger.info("üîÑ R√©partition des ouvertures et fermetures")
        
        distribution = {
            'opening_assignments': {},  # jour -> employee_id
            'closing_assignments': {}   # jour -> employee_id
        }
        
        # Calculer le nombre d'ouvertures/fermetures n√©cessaires
        total_openings_needed = 7  # Une ouverture par jour
        total_closings_needed = 7  # Une fermeture par jour
        
        opening_group = group_availability.get('ouverture', {'employees': []})
        closing_group = group_availability.get('fermeture', {'employees': []})
        
        logger.info(f"üåÖ {total_openings_needed} ouvertures √† r√©partir sur {len(opening_group['employees'])} employ√©s")
        logger.info(f"üåô {total_closings_needed} fermetures √† r√©partir sur {len(closing_group['employees'])} employ√©s")
        
        # R√©partition √©quitable des ouvertures
        if opening_group['employees']:
            opening_rotation = 0
            for day in range(7):
                available_openers = [emp for emp in opening_group['employees'] if emp['availability'] > 0]
                if available_openers:
                    selected_emp = available_openers[opening_rotation % len(available_openers)]
                    distribution['opening_assignments'][day] = selected_emp['employee']['id']
                    logger.info(f"üåÖ Jour {day}: {selected_emp['employee']['name']} √† l'ouverture")
                    opening_rotation += 1
        
        # R√©partition √©quitable des fermetures
        if closing_group['employees']:
            closing_rotation = 0
            for day in range(7):
                available_closers = [emp for emp in closing_group['employees'] if emp['availability'] > 0]
                if available_closers:
                    selected_emp = available_closers[closing_rotation % len(available_closers)]
                    distribution['closing_assignments'][day] = selected_emp['employee']['id']
                    logger.info(f"üåô Jour {day}: {selected_emp['employee']['name']} √† la fermeture")
                    closing_rotation += 1
        
        return distribution
    
    def balance_shifts_by_affluence(self, solution, employees, affluences):
        """
        √âquilibrer les journ√©es en fonction de l'affluence et du volume horaire total
        CORRECTION: Assurer une r√©partition √©quitable pour m√™me niveau d'affluence
        """
        logger.info("‚öñÔ∏è √âquilibrage selon l'affluence")
        
        # Grouper les jours par niveau d'affluence
        affluence_groups = {}
        for day in range(7):
            day_affluence = affluences[day]
            if day_affluence not in affluence_groups:
                affluence_groups[day_affluence] = []
            affluence_groups[day_affluence].append(day)
        
        # Analyser et √©quilibrer par groupe d'affluence
        for affluence_level, days in affluence_groups.items():
            logger.info(f"üìä Niveau d'affluence {affluence_level}: jours {days}")
            
            # Calculer la r√©partition actuelle
            day_stats = []
            for day in days:
                working_employees = []
                total_hours = 0
                
                for emp in employees:
                    emp_id = str(emp['id'])
                    if emp_id in solution:
                        slot = solution[emp_id].get(day, 'Repos')
                        if slot != 'Repos' and slot not in ['MAL', 'Formation', 'CP']:
                            working_employees.append({
                                'emp_id': emp_id,
                                'name': emp['name'],
                                'slot': slot
                            })
                            # Calculer les heures de ce cr√©neau
                            slot_hours = self.get_slot_hours_value(slot)
                            total_hours += slot_hours
                
                day_stats.append({
                    'day': day,
                    'employees': len(working_employees),
                    'total_hours': total_hours,
                    'working_list': working_employees
                })
                
                logger.info(f"üìÖ Jour {day}: {len(working_employees)} employ√©s, {total_hours}h total")
            
            # D√©tecter les d√©s√©quilibres pour m√™me affluence
            if len(day_stats) > 1:
                employee_counts = [stat['employees'] for stat in day_stats]
                min_employees = min(employee_counts)
                max_employees = max(employee_counts)
                
                if max_employees - min_employees > 2:  # √âcart trop important
                    logger.warning(f"‚ö†Ô∏è D√©s√©quilibre d√©tect√© pour affluence {affluence_level}:")
                    logger.warning(f"   Minimum: {min_employees} employ√©s, Maximum: {max_employees} employ√©s")
                    logger.warning(f"   Recommandation: √âquilibrer entre {min_employees+1} et {max_employees-1} employ√©s")
        
        return solution
    
    def get_slot_hours_value(self, slot):
        """Obtenir les heures d'un cr√©neau"""
        slot_hours = {
            '06h00-14h00': 8.0, '07h30-15h30': 8.0, '09h00-17h00': 8.0,
            '10h00-18h00': 8.0, '11h00-19h00': 8.0, '12h00-20h00': 8.0,
            '13h00-20h30': 7.5, '14h00-20h30': 6.5, '16h00-20h30': 4.5,
            '06h00-16h30': 10.5, '07h30-16h30': 9.0, '10h30-16h30': 6.0,
            '11h00-18h30': 7.5, '12h00-19h30': 7.5, '16h30-20h30': 4.0,
            '17h00-20h30': 3.5, '06h00-13h00': 7.0, '07h30-13h00': 5.5,
            '09h30-13h00': 3.5, '11h00-18h00': 7.0, '12h00-19h00': 7.0,
            '13h00-20h30': 7.5, '14h00-20h30': 6.5, 'Formation': 8.0,
            'CP': 5.5, 'MAL': 0, 'Repos': 0
        }
        return slot_hours.get(slot, 0)
    
    def solve_planning(self, employees, constraints, affluences, week_number, weekend_history=None):
        """
        R√©solution avec strat√©gie de calcul adapt√©e selon les sp√©cifications
        """
        try:
            logger.info(f"üöÄ D√©but r√©solution planning semaine {week_number} - Nouvelle strat√©gie")
            logger.info(f"üë• Employ√©s: {len(employees)}, Contraintes: {len(constraints)}")
            
            # √âTAPE 1: Placer les contraintes (repos, cong√©, maladie, formations)
            logger.info("üìã √âTAPE 1: Placement des contraintes")
            
            # √âTAPE 2: Calculer les fr√©quences de travail weekend et placer les repos intelligemment
            logger.info("üìä √âTAPE 2: Calcul des fr√©quences weekend")
            weekend_scores = self.calculate_weekend_frequencies(employees, week_number, weekend_history)
            
            # √âTAPE 3: Calculer les disponibilit√©s des groupes
            logger.info("üë• √âTAPE 3: Classification et calcul des disponibilit√©s")
            groups = self.categorize_employees_by_groups(employees)
            group_availability = self.calculate_group_availability(groups, constraints, week_number)
            
            # √âTAPE 4: R√©partir les ouvertures et fermetures
            logger.info("üîÑ √âTAPE 4: R√©partition ouvertures/fermetures")
            shift_distribution = self.distribute_opening_closing_shifts(group_availability, affluences)
            
            # √âTAPE 5: R√©solution OR-Tools avec les nouvelles contraintes
            logger.info("‚öôÔ∏è √âTAPE 5: R√©solution OR-Tools optimis√©e")
            
            self.model = cp_model.CpModel()
            
            # CR√âNEAUX AVEC NOUVEAUX CR√âNEAUX SP√âCIFI√âS (7h30, 11h, 12h)
            def get_time_slots_for_day(day_index, affluence_level):
                """Cr√©neaux avec cr√©neaux restants 7h30, 11h, 12h selon la strat√©gie"""
                
                if day_index == 6:  # DIMANCHE
                    return [
                        'Repos',
                        '06h00-13h00',    # Ouverture matin
                        '07h30-13h00',    # Cr√©neau 7h30
                        '09h30-13h00',    # Renfort matin
                        '11h00-18h00',    # Cr√©neau 11h
                        '12h00-19h00',    # Cr√©neau 12h
                        '13h00-20h30',    # Fermeture apr√®s-midi
                        '14h00-20h30',    # Support fermeture
                    ]
                    
                elif day_index == 5:  # SAMEDI
                    return [
                        'Repos',
                        '06h00-16h30',    # Ouverture longue
                        '07h30-16h30',    # Cr√©neau 7h30
                        '10h30-16h30',    # Renfort midi
                        '11h00-18h30',    # Cr√©neau 11h
                        '12h00-19h30',    # Cr√©neau 12h
                        '16h30-20h30',    # Fermeture
                        '17h00-20h30',    # Support fermeture
                    ]
                    
                else:  # LUNDI √Ä VENDREDI
                    base_slots = [
                        'Repos',
                        '06h00-14h00',    # Ouverture standard
                        '07h30-15h30',    # Cr√©neau 7h30
                        '11h00-19h00',    # Cr√©neau 11h
                        '12h00-20h00',    # Cr√©neau 12h
                        '13h00-20h30',    # Fermeture
                    ]
                    
                    # Ajouter selon affluence
                    if affluence_level >= 2:
                        base_slots.extend([
                            '10h00-18h00',    # Renfort midi
                            '14h00-20h30',    # Renfort fermeture
                        ])
                    
                    if affluence_level >= 3:
                        base_slots.extend([
                            '09h00-17h00',    # Renfort matin√©e
                            '16h00-20h30',    # Support fermeture courte
                        ])
                    
                    return base_slots

            # HEURES PAR CR√âNEAU (mise √† jour avec nouveaux cr√©neaux)
            slot_hours = {
                # Cr√©neaux semaine
                '06h00-14h00': 8.0,
                '07h30-15h30': 8.0,
                '09h00-17h00': 8.0,
                '10h00-18h00': 8.0,
                '11h00-19h00': 8.0,    # Nouveau cr√©neau 11h
                '12h00-20h00': 8.0,    # Nouveau cr√©neau 12h
                '13h00-20h30': 7.5,
                '14h00-20h30': 6.5,
                '16h00-20h30': 4.5,
                
                # Cr√©neaux samedi
                '06h00-16h30': 10.5,
                '07h30-16h30': 9.0,
                '10h30-16h30': 6.0,
                '11h00-18h30': 7.5,    # Nouveau cr√©neau 11h samedi
                '12h00-19h30': 7.5,    # Nouveau cr√©neau 12h samedi
                '16h30-20h30': 4.0,
                '17h00-20h30': 3.5,
                
                # Cr√©neaux dimanche
                '06h00-13h00': 7.0,
                '07h30-13h00': 5.5,
                '09h30-13h00': 3.5,
                '11h00-18h00': 7.0,    # Nouveau cr√©neau 11h dimanche
                '12h00-19h00': 7.0,    # Nouveau cr√©neau 12h dimanche
                '13h00-20h30': 7.5,
                '14h00-20h30': 6.5,
                
                # Sp√©ciaux
                'Formation': 8.0,
                'CP': 5.5,
                'MAL': 0,
                'Maladie': 0,
                'Indisponible': 0,
                'Repos': 0
            }

            # Variables d√©cisionnelles avec int√©gration de la strat√©gie
            shifts = {}
            days = 7
            
            # Validation des donn√©es d'entr√©e
            if len(employees) < 1:
                return {
                    'success': False,
                    'error': 'Au moins 1 employ√© est n√©cessaire',
                    'diagnostic': ['Aucun employ√© fourni'],
                    'suggestions': ['Ajoutez au moins un employ√©']
                }
            
            diagnostic = []
            suggestions = []
            
            # V√©rifier les comp√©tences
            opening_staff = sum(1 for emp in employees if 'Ouverture' in emp.get('skills', []))
            closing_staff = sum(1 for emp in employees if 'Fermeture' in emp.get('skills', []))
            
            if opening_staff == 0:
                diagnostic.append('Aucun employ√© avec comp√©tence Ouverture')
                suggestions.append('Ajoutez la comp√©tence Ouverture √† au moins un employ√©')
            
            if closing_staff == 0:
                diagnostic.append('Aucun employ√© avec comp√©tence Fermeture')
                suggestions.append('Ajoutez la comp√©tence Fermeture √† au moins un employ√©')
            
            # Initialiser les variables pour chaque employ√©
            for emp in employees:
                emp_id = str(emp['id'])
                shifts[emp_id] = {}
                
                for day in range(days):
                    shifts[emp_id][day] = {}
                    available_slots = get_time_slots_for_day(day, affluences[day])
                    
                    # Appliquer contraintes sp√©cifiques
                    if emp_id in constraints and str(day) in constraints[emp_id]:
                        constraint_value = constraints[emp_id][str(day)]
                        if constraint_value in ['CP', 'Maladie', 'Formation', 'Indisponible', 'Repos']:
                            available_slots = [constraint_value]
                    
                    # Contraintes apprentis : jours de formation
                    if emp.get('contract') == 'Apprentissage' and 'trainingDays' in emp:
                        if (day + 1) in emp['trainingDays']:
                            available_slots = ['Formation']
                    
                    for slot in available_slots:
                        if slot not in slot_hours:
                            slot_hours[slot] = 0
                        shifts[emp_id][day][slot] = self.model.NewBoolVar(f'shift_{emp_id}_{day}_{slot}')
            
            # CONTRAINTES OPTIMIS√âES
            
            # 1. Volume horaire STRICT (tol√©rance r√©duite √† ¬±0.5h)
            for emp in employees:
                emp_id = str(emp['id'])
                total_hours = []
                
                for day in range(days):
                    for slot, var in shifts[emp_id][day].items():
                        hours_int = int(slot_hours[slot] * 10)
                        total_hours.append(var * hours_int)
                
                target_hours = emp['volume'] * 10
                # Tol√©rance de ¬±0.5h seulement pour plus de pr√©cision
                tolerance = 5  # 0.5h * 10
                self.model.Add(sum(total_hours) >= (target_hours - tolerance))
                self.model.Add(sum(total_hours) <= (target_hours + tolerance))
            
            # 2. Un seul cr√©neau par jour et par employ√©
            for emp in employees:
                emp_id = str(emp['id'])
                for day in range(days):
                    self.model.Add(sum(shifts[emp_id][day].values()) == 1)
            
            # 3. Repos obligatoires - AM√âLIOR√â
            for emp in employees:
                emp_id = str(emp['id'])
                rest_count = []
                
                for day in range(days):
                    if not (emp_id in constraints and str(day) in constraints[emp_id]):
                        if 'Repos' in shifts[emp_id][day]:
                            rest_count.append(shifts[emp_id][day]['Repos'])
                
                if rest_count:
                    # 2 repos minimum pour les temps pleins (‚â•35h)
                    if emp['volume'] >= 35:
                        self.model.Add(sum(rest_count) >= 2)
                    else:
                        self.model.Add(sum(rest_count) >= 1)
            
            # 4. Contraintes d'ouverture STRICTES avec v√©rification des comp√©tences
            for day in range(7):
                opening_vars = []
                
                # R√àGLE STRICTE: Seuls les employ√©s avec comp√©tence "Ouverture" peuvent ouvrir
                for emp in employees:
                    emp_id = str(emp['id'])
                    if 'Ouverture' in emp.get('skills', []):
                        for slot in shifts[emp_id][day]:
                            if slot.startswith('06h00'):
                                opening_vars.append(shifts[emp_id][day][slot])
                    else:
                        # INTERDIRE l'ouverture pour ceux sans comp√©tence
                        for slot in shifts[emp_id][day]:
                            if slot.startswith('06h00'):
                                self.model.Add(shifts[emp_id][day][slot] == 0)
                                logger.info(f"üö´ {emp['name']} interdit √† l'ouverture (pas de comp√©tence)")
                
                # Prioriser l'employ√© assign√© par la strat√©gie si disponible ET comp√©tent
                if day in shift_distribution['opening_assignments']:
                    preferred_emp_id = str(shift_distribution['opening_assignments'][day])
                    preferred_emp = next((emp for emp in employees if str(emp['id']) == preferred_emp_id), None)
                    
                    if preferred_emp and 'Ouverture' in preferred_emp.get('skills', []):
                        if preferred_emp_id in shifts and day < len(shifts[preferred_emp_id]):
                            for slot in shifts[preferred_emp_id][day]:
                                if slot.startswith('06h00'):
                                    # Favoriser cet employ√© pour l'ouverture
                                    self.model.Add(shifts[preferred_emp_id][day][slot] == 1)
                                    logger.info(f"‚úÖ {preferred_emp['name']} priorit√© ouverture jour {day}")
                                    break
                    else:
                        logger.warning(f"‚ö†Ô∏è Employ√© pr√©f√©r√© {preferred_emp_id} jour {day} n'a pas comp√©tence ouverture")
                
                # Exactement 1 personne √† l'ouverture (parmi les comp√©tents)
                if opening_vars:
                    self.model.Add(sum(opening_vars) == 1)
                else:
                    logger.error(f"‚ùå Aucun employ√© comp√©tent pour ouverture jour {day}")
                    diagnostic.append(f'Jour {day}: Aucun employ√© avec comp√©tence Ouverture disponible')
            
            # 5. Contraintes de fermeture STRICTES avec int√©gration de la strat√©gie
            for day in range(7):
                closing_vars_skilled = []  # Avec comp√©tence fermeture
                
                for emp in employees:
                    emp_id = str(emp['id'])
                    for slot in shifts[emp_id][day]:
                        if '20h30' in slot and not slot.startswith('06h00'):
                            if 'Fermeture' in emp.get('skills', []):
                                closing_vars_skilled.append(shifts[emp_id][day][slot])
                
                # Prioriser l'employ√© assign√© par la strat√©gie si disponible
                if day in shift_distribution['closing_assignments']:
                    preferred_emp_id = str(shift_distribution['closing_assignments'][day])
                    if preferred_emp_id in shifts and day < len(shifts[preferred_emp_id]):
                        for slot in shifts[preferred_emp_id][day]:
                            if '20h30' in slot and not slot.startswith('06h00'):
                                # Trouver l'employ√© correspondant
                                target_emp = next((emp for emp in employees if str(emp['id']) == preferred_emp_id), None)
                                if target_emp and 'Fermeture' in target_emp.get('skills', []):
                                    # Favoriser cet employ√© pour la fermeture
                                    self.model.Add(shifts[preferred_emp_id][day][slot] == 1)
                                    break
                
                # Au moins 1 personne avec comp√©tence fermeture
                if closing_vars_skilled:
                    self.model.Add(sum(closing_vars_skilled) >= 1)
            
            # 6. Contraintes mineurs avec repos dimanche obligatoire
            for emp in employees:
                if emp.get('status') == 'Mineur':
                    emp_id = str(emp['id'])
                    
                    # Repos dimanche obligatoire pour mineurs
                    if 'Repos' in shifts[emp_id][6]:
                        self.model.Add(shifts[emp_id][6]['Repos'] == 1)
                    
                    # Maximum 35h pour mineurs
                    total_hours_minor = []
                    for day in range(days):
                        for slot, var in shifts[emp_id][day].items():
                            hours_int = int(slot_hours[slot] * 10)
                            total_hours_minor.append(var * hours_int)
                    
                    self.model.Add(sum(total_hours_minor) <= 350)  # 35h max
            
            # 7. Contraintes repos weekend intelligents bas√©s sur l'historique
            for emp in employees:
                emp_id = str(emp['id'])
                weekend_score = weekend_scores.get(emp_id, {'total_weekend': 0})
                
                # Plus l'employ√© a travaill√© les weekends, plus il a de chance d'avoir repos
                if weekend_score['total_weekend'] > 4:  # Seuil arbitraire
                    # Priorit√© au repos samedi/dimanche
                    if 'Repos' in shifts[emp_id][5]:  # Samedi
                        # Augmenter la probabilit√© de repos samedi
                        pass  # OR-Tools g√©rera via l'objectif
                    if 'Repos' in shifts[emp_id][6]:  # Dimanche
                        # Augmenter la probabilit√© de repos dimanche
                        pass  # OR-Tools g√©rera via l'objectif
            
            # 8. NOUVELLE CONTRAINTE: √âquilibrage lundi-vendredi pour m√™me affluence
            # Grouper les jours de semaine par affluence
            weekday_affluence_groups = {}
            for day in range(5):  # Lundi √† vendredi seulement
                day_affluence = affluences[day]
                if day_affluence not in weekday_affluence_groups:
                    weekday_affluence_groups[day_affluence] = []
                weekday_affluence_groups[day_affluence].append(day)
            
            # Pour chaque groupe d'affluence, √©quilibrer le nombre d'employ√©s
            for affluence_level, days_group in weekday_affluence_groups.items():
                if len(days_group) > 1:  # Plusieurs jours avec m√™me affluence
                    logger.info(f"‚öñÔ∏è √âquilibrage affluence {affluence_level}: jours {days_group}")
                    
                    # Contrainte: √©cart max de 2 employ√©s entre jours de m√™me affluence
                    for i, day1 in enumerate(days_group):
                        for day2 in days_group[i+1:]:
                            working_day1 = []
                            working_day2 = []
                            
                            for emp in employees:
                                emp_id = str(emp['id'])
                                for slot, var in shifts[emp_id][day1].items():
                                    if slot != 'Repos':
                                        working_day1.append(var)
                                for slot, var in shifts[emp_id][day2].items():
                                    if slot != 'Repos':
                                        working_day2.append(var)
                            
                            # Contrainte: |employ√©s_jour1 - employ√©s_jour2| <= 1 (plus strict)
                            if working_day1 and working_day2:
                                diff_pos = self.model.NewIntVar(0, 5, f'diff_pos_{day1}_{day2}')
                                diff_neg = self.model.NewIntVar(0, 5, f'diff_neg_{day1}_{day2}')
                                
                                self.model.Add(sum(working_day1) - sum(working_day2) == diff_pos - diff_neg)
                                self.model.Add(diff_pos + diff_neg <= 2)  # Retour √† √©cart max 2 employ√©s (plus r√©aliste)
                                
                                logger.info(f"‚öñÔ∏è Contrainte √©quilibrage: jour {day1} vs jour {day2} (√©cart max 1)")
            
            # 9. CONTRAINTE SUPPL√âMENTAIRE: Minimum/Maximum employ√©s par jour semaine
            for day in range(5):  # Lundi √† vendredi
                working_day = []
                for emp in employees:
                    emp_id = str(emp['id'])
                    for slot, var in shifts[emp_id][day].items():
                        if slot != 'Repos':
                            working_day.append(var)
                
                if working_day:
                    # Au moins 4 employ√©s et maximum 6 employ√©s par jour de semaine (ajust√©)
                    self.model.Add(sum(working_day) >= 4)
                    self.model.Add(sum(working_day) <= 6)
                    logger.info(f"üìä Jour {day}: entre 4 et 7 employ√©s requis")
            
            # OBJECTIF MULTI-CRIT√àRES
            objectives = []
            
            # Priorit√© 1: Respecter les volumes horaires
            for emp in employees:
                emp_id = str(emp['id'])
                total_hours_var = self.model.NewIntVar(0, 500, f'total_hours_{emp_id}')
                
                hour_terms = []
                for day in range(days):
                    for slot, var in shifts[emp_id][day].items():
                        hours_int = int(slot_hours[slot] * 10)
                        hour_terms.append(var * hours_int)
                
                self.model.Add(total_hours_var == sum(hour_terms))
                
                target_hours = emp['volume'] * 10
                gap_pos = self.model.NewIntVar(0, 100, f'gap_pos_{emp_id}')
                gap_neg = self.model.NewIntVar(0, 100, f'gap_neg_{emp_id}')
                
                self.model.Add(total_hours_var + gap_neg - gap_pos == target_hours)
                # Poids plus √©lev√© pour les √©carts de volume
                objectives.append(20 * (gap_pos + gap_neg))
            
            # Objectif global
            self.model.Minimize(sum(objectives))
            
            # R√©solution avec param√®tres optimis√©s
            solver = cp_model.CpSolver()
            solver.parameters.max_time_in_seconds = 60.0
            solver.parameters.log_search_progress = False
            solver.parameters.num_search_workers = 4
            
            status = solver.Solve(self.model)
            
            logger.info(f"Statut r√©solution: {status}")
            
            if status in [cp_model.OPTIMAL, cp_model.FEASIBLE]:
                # Construire la solution
                solution = {}
                validation = {'errors': [], 'warnings': [], 'stats': {}}
                
                total_week_hours = 0
                
                for emp in employees:
                    emp_id = str(emp['id'])
                    solution[emp_id] = {}
                    emp_total_hours = 0
                    
                    for day in range(days):
                        assigned_slot = 'Repos'  # Par d√©faut
                        
                        for slot, var in shifts[emp_id][day].items():
                            if solver.Value(var) == 1:
                                assigned_slot = slot
                                if slot != 'Repos':
                                    emp_total_hours += slot_hours.get(slot, 0)
                                break
                        
                        solution[emp_id][day] = assigned_slot
                    
                    total_week_hours += emp_total_hours
                    
                    # Validation volume horaire
                    volume_diff = abs(emp_total_hours - emp['volume'])
                    if volume_diff > 0.5:  # Tol√©rance 0.5h
                        validation['warnings'].append(
                            f"{emp['name']}: {emp_total_hours}h au lieu de {emp['volume']}h (√©cart {volume_diff:+.1f}h)"
                        )
                
                # √âTAPE 6: √âquilibrage selon l'affluence
                logger.info("üìä √âTAPE 6: √âquilibrage selon l'affluence")
                balanced_solution = self.balance_shifts_by_affluence(solution, employees, affluences)
                
                # √âTAPE 7: Ajustement final des heures r√©glementaires
                logger.info("‚öñÔ∏è √âTAPE 7: Ajustement des heures r√©glementaires")
                adjusted_solution = self.adjust_weekly_hours_and_balance(balanced_solution, employees, slot_hours)
                
                # Recalculer les validations apr√®s ajustement
                for emp in employees:
                    emp_id = str(emp['id'])
                    if emp_id in adjusted_solution:
                        adjusted_hours = 0
                        for day in range(days):
                            slot = adjusted_solution[emp_id].get(day, 'Repos')
                            if slot != 'Repos':
                                adjusted_hours += slot_hours.get(slot, 0)
                        
                        # Mettre √† jour les validations
                        volume_diff = abs(adjusted_hours - emp['volume'])
                        if volume_diff > 0.3:  # Tol√©rance r√©duite apr√®s ajustement
                            validation['warnings'].append(
                                f"{emp['name']}: {adjusted_hours}h apr√®s ajustement (√©cart {volume_diff:+.1f}h)"
                            )
                
                validation['stats'] = {
                    'total_hours': total_week_hours,
                    'diagnostic': diagnostic,
                    'suggestions': suggestions
                }
                
                logger.info(f"‚úÖ Solution trouv√©e avec nouvelle strat√©gie: {total_week_hours}h totales")
                
                return {
                    'success': True,
                    'planning': adjusted_solution,  # Retourner la solution ajust√©e
                    'validation': validation,
                    'diagnostic': diagnostic,
                    'suggestions': suggestions,
                    'strategy_info': {
                        'weekend_scores': weekend_scores,
                        'group_distribution': {
                            'ouverture': len(groups['ouverture']),
                            'fermeture': len(groups['fermeture']),
                            'vente': len(groups['vente'])
                        },
                        'shift_assignments': shift_distribution
                    },
                    'solver_info': {
                        'status': 'OPTIMAL' if status == cp_model.OPTIMAL else 'FEASIBLE',
                        'solve_time': solver.WallTime(),
                        'objective': solver.ObjectiveValue() if status == cp_model.OPTIMAL else None
                    }
                }
            
            else:
                # Diagnostics sp√©cifiques selon le statut
                if status == cp_model.INFEASIBLE:
                    error_msg = "Aucune solution possible avec les contraintes actuelles"
                    diagnostic.extend([
                        'Les contraintes sont trop restrictives',
                        'Impossible de respecter tous les volumes horaires avec 2 repos minimum',
                        'Conflit entre contraintes et comp√©tences requises'
                    ])
                    suggestions.extend([
                        'V√©rifiez que vous avez assez de personnel',
                        'Assurez-vous d\'avoir au moins 2 personnes avec comp√©tence Ouverture',
                        'Assurez-vous d\'avoir au moins 2 personnes avec comp√©tence Fermeture',
                        'R√©duisez temporairement les contraintes de cong√©s'
                    ])
                elif status == cp_model.MODEL_INVALID:
                    error_msg = "Mod√®le de contraintes invalide"
                    diagnostic.append('Erreur dans la d√©finition du probl√®me')
                else:
                    error_msg = f"R√©solution √©chou√©e (statut: {status})"
                
                return {
                    'success': False,
                    'error': error_msg,
                    'diagnostic': diagnostic,
                    'suggestions': suggestions,
                    'solver_info': {
                        'status': status,
                        'solve_time': solver.WallTime() if solver else 0
                    }
                }
        
        except Exception as e:
            logger.error(f"Erreur dans solve_planning: {str(e)}")
            return {
                'success': False,
                'error': f'Erreur technique: {str(e)}',
                'diagnostic': ['Erreur interne du solveur'],
                'suggestions': ['V√©rifiez le format des donn√©es d\'entr√©e', 'Contactez le support technique']
            }

# Instance globale du solver
solver_instance = PlanningBoulangerieSolver()

@app.route('/', methods=['GET'])
def health_check():
    """Point de sant√© principal"""
    return jsonify({
        'status': 'online',
        'service': 'Planning Boulangerie OR-Tools API',
        'version': '5.0',
        'timestamp': datetime.now().isoformat(),
        'endpoints': {
            'status': 'GET /',
            'solve': 'POST /solve'
        }
    })

@app.route('/solve', methods=['POST', 'OPTIONS'])
def solve_planning():
    """Endpoint principal pour r√©soudre un planning"""
    
    if request.method == 'OPTIONS':
        response = jsonify({'status': 'ok'})
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Headers', 'Content-Type')
        response.headers.add('Access-Control-Allow-Methods', 'POST, OPTIONS')
        return response
    
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                'success': False,
                'error': 'Aucune donn√©e JSON re√ßue',
                'diagnostic': ['Corps de requ√™te vide'],
                'suggestions': ['V√©rifiez que les donn√©es sont bien envoy√©es en JSON']
            }), 400
        
        required_fields = ['employees', 'affluences']
        for field in required_fields:
            if field not in data:
                return jsonify({
                    'success': False,
                    'error': f'Champ manquant: {field}',
                    'diagnostic': [f'Le champ {field} est requis'],
                    'suggestions': ['V√©rifiez la structure des donn√©es envoy√©es']
                }), 400
        
        employees = data['employees']
        constraints = data.get('constraints', {})
        affluences = data['affluences']
        week_number = data.get('week_number', 1)
        weekend_history = data.get('weekend_history', {})
        
        # Validation des donn√©es
        if len(employees) == 0:
            return jsonify({
                'success': False,
                'error': 'Aucun employ√© fourni',
                'diagnostic': ['Liste des employ√©s vide'],
                'suggestions': ['Ajoutez au moins un employ√©']
            }), 400
        
        if len(affluences) != 7:
            return jsonify({
                'success': False,
                'error': 'Il faut exactement 7 valeurs d\'affluence (Lun-Dim)',
                'diagnostic': [f'Re√ßu {len(affluences)} valeurs au lieu de 7'],
                'suggestions': ['V√©rifiez que vous avez une valeur d\'affluence pour chaque jour']
            }), 400
        
        logger.info(f"R√©solution planning pour {len(employees)} employ√©s")
        
        # R√©soudre le planning avec l'historique des weekends
        result = solver_instance.solve_planning(employees, constraints, affluences, week_number, weekend_history)
        
        # Ajouter metadata
        result['metadata'] = {
            'processed_at': datetime.now().isoformat(),
            'week_number': week_number,
            'total_employees': len(employees),
            'api_version': '5.0'
        }
        
        status_code = 200 if result['success'] else 400
        response = jsonify(result)
        response.headers.add('Access-Control-Allow-Origin', '*')
        
        return response, status_code
        
    except json.JSONDecodeError:
        return jsonify({
            'success': False,
            'error': 'Format JSON invalide',
            'diagnostic': ['Donn√©es JSON malform√©es'],
            'suggestions': ['V√©rifiez la syntaxe JSON']
        }), 400
        
    except Exception as e:
        logger.error(f"Erreur endpoint: {str(e)}")
        return jsonify({
            'success': False,
            'error': f'Erreur serveur: {str(e)}',
            'diagnostic': ['Erreur interne du serveur'],
            'suggestions': ['Contactez le support technique']
        }), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    debug = os.environ.get('FLASK_DEBUG', 'False').lower() == 'true'
    
    logger.info(f"D√©marrage serveur sur port {port}")
    app.run(host='0.0.0.0', port=port, debug=debug)
