// Service email simplifi√© utilisant uniquement EmailJS
const emailServiceAlternative = require('./emailServiceAlternative');

class EmailService {
  constructor() {
    this.isConfigured = true;
    console.log('‚úÖ Service EmailJS configur√©');
  }

  // V√©rifier la connexion
  async verifyConnection() {
    return await emailServiceAlternative.verifyConnection();
  }

  // Envoyer un email de rejet d'arr√™t maladie
  async sendSickLeaveRejection(sickLeave, rejectionReason, rejectedBy) {
    return await emailServiceAlternative.sendSickLeaveRejection(sickLeave, rejectionReason, rejectedBy);
  }

  // Envoyer un email de validation d'arr√™t maladie
  async sendSickLeaveValidation(sickLeave, validatedBy) {
    return await emailServiceAlternative.sendSickLeaveValidation(sickLeave, validatedBy);
  }

  // Envoyer un email au comptable
  async sendToAccountant(sickLeave, accountantEmail) {
    return await emailServiceAlternative.sendToAccountant(sickLeave, accountantEmail);
  }

  // Envoyer un email d'alerte
  async sendAlertEmail(sickLeave, recipientEmails) {
    return await emailServiceAlternative.sendAlertEmail(sickLeave, recipientEmails);
  }

  // Envoyer un email de confirmation de demande de cong√©s
  async sendVacationRequestConfirmation(vacationRequest) {
    return await emailServiceAlternative.sendVacationRequestConfirmation(vacationRequest);
  }

  // Envoyer un email d'alerte pour demande de cong√©s
  async sendVacationRequestAlert(vacationRequest, recipientEmails) {
    return await emailServiceAlternative.sendVacationRequestAlert(vacationRequest, recipientEmails);
  }

  // Envoyer un email de validation de cong√©s
  async sendVacationRequestValidation(vacationRequest, validatedBy) {
    return await emailServiceAlternative.sendVacationRequestValidation(vacationRequest, validatedBy);
  }

  // Envoyer un email de rejet de cong√©s
  async sendVacationRequestRejection(vacationRequest, rejectedBy, reason) {
    return await emailServiceAlternative.sendVacationRequestRejection(vacationRequest, rejectedBy, reason);
  }

  // Envoyer un mot de passe √† un salari√©
  async sendEmployeePassword({ employeeName, employeeEmail, password, loginUrl }) {
    return await emailServiceAlternative.sendEmployeePassword({ employeeName, employeeEmail, password, loginUrl });
  }

  // Envoyer un email g√©n√©rique
  async sendEmail(to, subject, htmlContent, textContent) {
    return await emailServiceAlternative.sendEmail(to, subject, htmlContent, textContent);
  }

  // Envoyer un email de notification de document personnel
  async sendDocumentNotification(employeeEmail, employeeName, documentTitle, documentCategory) {
    return await emailServiceAlternative.sendDocumentNotification(employeeEmail, employeeName, documentTitle, documentCategory);
  }

  // Envoyer un email de notification de document g√©n√©ral
  async sendGeneralDocumentNotification(employeeEmail, employeeName, documentTitle, documentCategory) {
    return await emailServiceAlternative.sendGeneralDocumentNotification(employeeEmail, employeeName, documentTitle, documentCategory);
  }

  // Envoyer un email de test
  async sendTestEmail(toEmail) {
    return await emailServiceAlternative.sendTestEmail(toEmail);
  }

  // V√©rifier la configuration email
  checkEmailConfig() {
    return this.isConfigured;
  }

  // Envoyer confirmation demande d'acompte au salari√©
  async sendAdvanceRequestConfirmation(employeeEmail, employeeName, amount, deductionMonth) {
    try {
      console.log(`üìß Envoi confirmation demande acompte √† ${employeeName} (${employeeEmail})`);
      return await emailServiceAlternative.sendAdvanceRequestConfirmation(employeeEmail, employeeName, amount, deductionMonth);
    } catch (error) {
      console.error('‚ùå Erreur envoi confirmation demande acompte:', error);
      return { success: false, message: error.message };
    }
  }

  // Envoyer notification demande d'acompte au manager
  async sendAdvanceRequestNotification(managerEmail, managerName, employeeName, amount, deductionMonth, comment) {
    try {
      console.log(`üìß Envoi notification demande acompte √† ${managerName} (${managerEmail})`);
      return await emailServiceAlternative.sendAdvanceRequestNotification(managerEmail, managerName, employeeName, amount, deductionMonth, comment);
    } catch (error) {
      console.error('‚ùå Erreur envoi notification demande acompte:', error);
      return { success: false, message: error.message };
    }
  }

  // Envoyer confirmation d'approbation d'acompte
  async sendAdvanceApproved(employeeEmail, employeeName, amount, deductionMonth, managerComment) {
    try {
      console.log(`üìß Envoi confirmation approbation acompte √† ${employeeName} (${employeeEmail})`);
      return await emailServiceAlternative.sendAdvanceApproved(employeeEmail, employeeName, amount, deductionMonth, managerComment);
    } catch (error) {
      console.error('‚ùå Erreur envoi confirmation approbation:', error);
      return { success: false, message: error.message };
    }
  }

  // Envoyer notification de rejet d'acompte
  async sendAdvanceRejected(employeeEmail, employeeName, amount, deductionMonth, managerComment) {
    try {
      console.log(`üìß Envoi notification rejet acompte √† ${employeeName} (${employeeEmail})`);
      return await emailServiceAlternative.sendAdvanceRejected(employeeEmail, employeeName, amount, deductionMonth, managerComment);
    } catch (error) {
      console.error('‚ùå Erreur envoi notification rejet:', error);
      return { success: false, message: error.message };
    }
  }
}

module.exports = new EmailService();