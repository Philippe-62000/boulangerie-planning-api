const SickLeave = require('../models/SickLeave');
const sftpService = require('../services/sftpService');
const imageValidationService = require('../services/imageValidationService');
const emailService = require('../services/emailService');
const absenceService = require('../services/absenceService');
const multer = require('multer');

// Configuration Multer pour l'upload
const storage = multer.memoryStorage();
const upload = multer({
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB
    files: 1
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['image/jpeg', 'image/jpg', 'application/pdf'];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('Type de fichier non support√©. Seuls JPG et PDF sont accept√©s.'), false);
    }
  }
});

// Middleware d'upload avec gestion d'erreurs
const uploadMiddleware = (req, res, next) => {
  console.log('üîß Middleware Multer - D√©but');
  console.log('üîß Headers:', req.headers);
  console.log('üîß Content-Type:', req.headers['content-type']);
  console.log('üîß Body (avant multer):', req.body);
  
  upload.single('sickLeaveFile')(req, res, (err) => {
    if (err) {
      console.error('‚ùå Erreur Multer:', err);
      return res.status(400).json({
        success: false,
        error: 'Erreur lors de l\'upload du fichier',
        details: err.message
      });
    }
    
    console.log('‚úÖ Middleware Multer - Succ√®s');
    console.log('‚úÖ File apr√®s Multer:', req.file ? {
      fieldname: req.file.fieldname,
      originalname: req.file.originalname,
      mimetype: req.file.mimetype,
      size: req.file.size,
      bufferLength: req.file.buffer ? req.file.buffer.length : 'undefined'
    } : 'Aucun fichier');
    console.log('‚úÖ Body apr√®s Multer:', req.body);
    
    next();
  });
};

// Test de connexion SFTP
const testSftpConnection = async (req, res) => {
  try {
    console.log('üîç Test de connexion SFTP...');
    
    // V√©rification de la configuration
    const config = {
      host: 'philange.synology.me',
      username: 'nHEIGHTn',
      passwordSet: !!process.env.SFTP_PASSWORD,
      passwordLength: process.env.SFTP_PASSWORD ? process.env.SFTP_PASSWORD.length : 0,
      port: 22
    };
    
    console.log('üîç Configuration SFTP:', config);

    if (!process.env.SFTP_PASSWORD) {
      return res.json({
        success: false,
        error: 'SFTP_PASSWORD non configur√©',
        details: 'La variable d\'environnement SFTP_PASSWORD n\'est pas d√©finie',
        config: config
      });
    }

    // Test de connexion direct avec ssh2-sftp-client
    const SftpClient = require('ssh2-sftp-client');
    const client = new SftpClient();
    
    const sftpConfig = {
      host: 'philange.synology.me',
      username: 'nHEIGHTn',
      password: process.env.SFTP_PASSWORD,
      port: 22,
      readyTimeout: 10000,
      retries: 2,
      retry_minTimeout: 1000
    };
    
    console.log('üîå Tentative de connexion SFTP...');
    await client.connect(sftpConfig);
    console.log('‚úÖ Connexion SFTP r√©ussie');
    
    // Test de listage du r√©pertoire racine
    const list = await client.list('/');
    console.log('üìÅ Contenu du r√©pertoire racine:', list.length, '√©l√©ments');
    
    await client.end();
    console.log('üîå D√©connexion SFTP');
    
    res.json({
      success: true,
      message: 'Connexion SFTP r√©ussie',
      details: `Connexion √©tablie avec succ√®s. ${list.length} √©l√©ments trouv√©s dans le r√©pertoire racine.`,
      config: config,
      rootDirectoryItems: list.length
    });
    
  } catch (error) {
    console.error('‚ùå Erreur test SFTP:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur de connexion SFTP',
      details: error.message,
      stack: error.stack,
      config: {
        host: 'philange.synology.me',
        username: 'nHEIGHTn',
        passwordSet: !!process.env.SFTP_PASSWORD,
        passwordLength: process.env.SFTP_PASSWORD ? process.env.SFTP_PASSWORD.length : 0,
        port: 22
      }
    });
  }
};

// Test d'upload simple (sans fichier)
const testUpload = async (req, res) => {
  try {
    console.log('üß™ Test d\'upload simple...');
    
    // Test de la configuration
    const config = {
      sftpPassword: !!process.env.SFTP_PASSWORD,
      sftpPasswordLength: process.env.SFTP_PASSWORD ? process.env.SFTP_PASSWORD.length : 0,
      multerAvailable: typeof require('multer') !== 'undefined',
      sharpAvailable: typeof require('sharp') !== 'undefined',
      pdfParseAvailable: typeof require('pdf-parse') !== 'undefined',
      sftpClientAvailable: typeof require('ssh2-sftp-client') !== 'undefined'
    };
    
    console.log('üîç Configuration test:', config);
    
    res.json({
      success: true,
      message: 'Test d\'upload r√©ussi',
      config: config,
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå Erreur test upload:', error);
    res.status(500).json({
      success: false,
      error: 'Erreur test upload',
      details: error.message,
      stack: error.stack
    });
  }
};

// Upload d'un arr√™t maladie par un salari√©
const uploadSickLeave = async (req, res) => {
  try {
    console.log('üì§ Upload arr√™t maladie re√ßu');
    console.log('üì§ Headers:', req.headers);
    console.log('üì§ Body:', req.body);
    console.log('üì§ File:', req.file ? {
      fieldname: req.file.fieldname,
      originalname: req.file.originalname,
      mimetype: req.file.mimetype,
      size: req.file.size
    } : 'Aucun fichier');
    
    // V√©rification des donn√©es requises
    const { employeeName, employeeEmail, startDate, endDate } = req.body;
    
    if (!employeeName || !employeeEmail || !startDate || !endDate) {
      return res.status(400).json({
        success: false,
        error: 'Tous les champs sont requis (nom, email, date d√©but, date fin)'
      });
    }

    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: 'Aucun fichier fourni'
      });
    }

    // Validation des dates
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    if (start >= end) {
      return res.status(400).json({
        success: false,
        error: 'La date de fin doit √™tre post√©rieure √† la date de d√©but'
      });
    }

    // Validation automatique du fichier
    console.log('üîç Validation automatique du fichier...');
    console.log('üîç Fichier √† valider:', {
      originalname: req.file.originalname,
      mimetype: req.file.mimetype,
      size: req.file.size,
      bufferLength: req.file.buffer ? req.file.buffer.length : 'undefined'
    });
    
    let validation;
    try {
      validation = await imageValidationService.validateFile(
        req.file.buffer,
        req.file.originalname,
        req.file.mimetype
      );
      console.log(`üìä Score de validation: ${validation.qualityScore}/100`);
    } catch (validationError) {
      console.error('‚ùå Erreur validation fichier:', validationError);
      return res.status(500).json({
        success: false,
        error: 'Erreur lors de la validation du fichier',
        details: validationError.message,
        stack: validationError.stack
      });
    }

    // Upload vers le NAS (ou sauvegarde locale si SFTP non configur√©)
    console.log('üì§ Upload vers le NAS...');
    console.log('üîç Configuration SFTP:', {
      host: 'philange.synology.me',
      username: 'nHEIGHTn',
      passwordSet: !!process.env.SFTP_PASSWORD,
      passwordLength: process.env.SFTP_PASSWORD ? process.env.SFTP_PASSWORD.length : 0
    });
    
    let uploadResult;
    if (!process.env.SFTP_PASSWORD) {
      console.log('‚ö†Ô∏è Mot de passe SFTP non configur√©, sauvegarde locale...');
      // Sauvegarde locale temporaire
      const fileName = `${Date.now()}_${employeeName.replace(/\s+/g, '_')}_${req.file.originalname}`;
      uploadResult = {
        fileName: fileName,
        remotePath: `/temp/${fileName}`,
        localPath: `/uploads/${fileName}`
      };
      console.log('‚úÖ Fichier sauvegard√© localement:', uploadResult);
    } else {
      try {
        uploadResult = await sftpService.uploadFile(
          req.file.buffer,
          req.file.originalname,
          employeeName
        );
        console.log('‚úÖ Upload r√©ussi:', uploadResult);
      } catch (uploadError) {
        console.error('‚ùå Erreur upload SFTP:', uploadError);
        return res.status(500).json({
          success: false,
          error: 'Erreur lors de l\'upload du fichier vers le NAS',
          details: uploadError.message
        });
      }
    }

    // Cr√©ation de l'enregistrement en base
    console.log('üíæ Cr√©ation de l\'enregistrement en base...');
    console.log('üíæ Donn√©es √† sauvegarder:', {
      employeeName: employeeName.trim(),
      employeeEmail: employeeEmail.trim().toLowerCase(),
      startDate: start,
      endDate: end,
      fileName: uploadResult.fileName,
      originalFileName: req.file.originalname,
      fileSize: req.file.size,
      fileType: req.file.mimetype,
      filePath: uploadResult.remotePath
    });
    
    let sickLeave;
    try {
      sickLeave = new SickLeave({
        employeeName: employeeName.trim(),
        employeeEmail: employeeEmail.trim().toLowerCase(),
        startDate: start,
        endDate: end,
        fileName: uploadResult.fileName,
        originalFileName: req.file.originalname,
        fileSize: req.file.size,
        fileType: req.file.mimetype,
        filePath: uploadResult.remotePath,
        autoValidation: {
          isReadable: validation.isReadable,
          qualityScore: validation.qualityScore,
          validationMessage: validation.message
        }
      });
      console.log('‚úÖ Objet SickLeave cr√©√©');
    } catch (createError) {
      console.error('‚ùå Erreur cr√©ation objet SickLeave:', createError);
      return res.status(500).json({
        success: false,
        error: 'Erreur lors de la cr√©ation de l\'enregistrement',
        details: createError.message,
        stack: createError.stack
      });
    }

    try {
      await sickLeave.save();
      console.log('‚úÖ Arr√™t maladie enregistr√©:', sickLeave._id);
    } catch (saveError) {
      console.error('‚ùå Erreur sauvegarde en base:', saveError);
      return res.status(500).json({
        success: false,
        error: 'Erreur lors de la sauvegarde en base de donn√©es',
        details: saveError.message,
        stack: saveError.stack
      });
    }

    // Envoyer une alerte aux administrateurs/magasin
    try {
      // R√©cup√©rer les param√®tres d'alerte
      const Parameter = require('../models/Parameters');
      const storeEmailParam = await Parameter.findOne({ name: 'storeEmail' });
      const adminEmailParam = await Parameter.findOne({ name: 'adminEmail' });
      const alertStoreParam = await Parameter.findOne({ name: 'alertStore' });
      const alertAdminParam = await Parameter.findOne({ name: 'alertAdmin' });
      
      const recipientEmails = [];
      
      // Ajouter l'email du magasin si activ√©
      if (alertStoreParam?.booleanValue && storeEmailParam?.stringValue) {
        recipientEmails.push(storeEmailParam.stringValue);
      }
      
      // Ajouter l'email de l'admin si activ√©
      if (alertAdminParam?.booleanValue && adminEmailParam?.stringValue) {
        recipientEmails.push(adminEmailParam.stringValue);
      }
      
      if (recipientEmails.length > 0) {
        const alertResult = await emailService.sendAlertEmail(sickLeave, recipientEmails);
        if (alertResult.success) {
          console.log('‚úÖ Alerte email envoy√©e:', alertResult.messageId);
        } else {
          console.log('‚ö†Ô∏è Alerte email non envoy√©e:', alertResult.error);
        }
      } else {
        console.log('‚ö†Ô∏è Aucun destinataire configur√© pour les alertes');
      }
    } catch (alertError) {
      console.error('‚ùå Erreur envoi alerte email:', alertError.message);
      // Continuer m√™me si l'alerte √©choue
    }

    res.json({
      success: true,
      message: 'Arr√™t maladie upload√© avec succ√®s',
      data: {
        id: sickLeave._id,
        status: sickLeave.status,
        validation: {
          score: validation.qualityScore,
          message: validation.message,
          isReadable: validation.isReadable
        }
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur upload arr√™t maladie:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de l\'upload de l\'arr√™t maladie'
    });
  }
};

// R√©cup√©rer tous les arr√™ts maladie (admin)
const getAllSickLeaves = async (req, res) => {
  try {
    const { status, page = 1, limit = 20, sortBy = 'uploadDate', sortOrder = 'desc' } = req.query;
    
    const query = {};
    if (status) {
      query.status = status;
    }

    const sort = {};
    sort[sortBy] = sortOrder === 'desc' ? -1 : 1;

    const skip = (page - 1) * limit;

    const [sickLeaves, total] = await Promise.all([
      SickLeave.find(query)
        .sort(sort)
        .skip(skip)
        .limit(parseInt(limit))
        .lean(),
      SickLeave.countDocuments(query)
    ]);

    res.json({
      success: true,
      data: {
        sickLeaves,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total,
          pages: Math.ceil(total / limit)
        }
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration arr√™ts maladie:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des arr√™ts maladie'
    });
  }
};

// R√©cup√©rer un arr√™t maladie par ID
const getSickLeaveById = async (req, res) => {
  try {
    const { id } = req.params;
    
    const sickLeave = await SickLeave.findById(id);
    
    if (!sickLeave) {
      return res.status(404).json({
        success: false,
        error: 'Arr√™t maladie non trouv√©'
      });
    }

    res.json({
      success: true,
      data: sickLeave
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration arr√™t maladie:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration de l\'arr√™t maladie'
    });
  }
};

// Valider un arr√™t maladie (admin)
const validateSickLeave = async (req, res) => {
  try {
    const { id } = req.params;
    const { validatedBy, notes } = req.body;

    const sickLeave = await SickLeave.findById(id);
    
    if (!sickLeave) {
      return res.status(404).json({
        success: false,
        error: 'Arr√™t maladie non trouv√©'
      });
    }

    if (sickLeave.status !== 'pending') {
      return res.status(400).json({
        success: false,
        error: 'Cet arr√™t maladie a d√©j√† √©t√© trait√©'
      });
    }

    // Marquer comme valid√©
    await sickLeave.markAsValidated(validatedBy, notes);

    // D√©placer le fichier vers le dossier valid√©
    try {
      const newPath = await sftpService.moveFile(sickLeave.filePath, 'validated');
      sickLeave.filePath = newPath;
      await sickLeave.save();
    } catch (error) {
      console.error('‚ùå Erreur d√©placement fichier:', error.message);
      // Continuer m√™me si le d√©placement √©choue
    }

    // Cr√©er automatiquement une absence dans "Gestion des salari√©s"
    try {
      const absenceResult = await absenceService.createAbsenceFromSickLeave(sickLeave);
      if (absenceResult.success) {
        console.log('‚úÖ Absence cr√©√©e automatiquement:', absenceResult.message);
      } else {
        console.log('‚ö†Ô∏è Absence non cr√©√©e:', absenceResult.message);
      }
    } catch (absenceError) {
      console.error('‚ùå Erreur cr√©ation absence:', absenceError.message);
      // Continuer m√™me si la cr√©ation d'absence √©choue
    }

    // Envoyer un email de validation au salari√©
    try {
      const emailResult = await emailService.sendSickLeaveValidation(sickLeave, validatedBy);
      if (emailResult.success) {
        console.log('‚úÖ Email de validation envoy√©:', emailResult.messageId);
      } else {
        console.log('‚ö†Ô∏è Email de validation non envoy√©:', emailResult.error);
      }
    } catch (emailError) {
      console.error('‚ùå Erreur envoi email validation:', emailError.message);
      // Continuer m√™me si l'email √©choue
    }

    // Envoyer un email au comptable
    try {
      // R√©cup√©rer l'email du comptable depuis les param√®tres
      const Parameter = require('../models/Parameters');
      const accountantParam = await Parameter.findOne({ name: 'accountantEmail' });
      let accountantEmail = accountantParam?.stringValue || process.env.ACCOUNTANT_EMAIL;
      
      console.log('üîç Recherche email comptable:', {
        paramFound: !!accountantParam,
        paramValue: accountantParam?.stringValue,
        envValue: process.env.ACCOUNTANT_EMAIL,
        finalValue: accountantEmail
      });
      
      // Si le param√®tre n'existe pas, le cr√©er
      if (!accountantParam) {
        console.log('üìù Cr√©ation du param√®tre accountantEmail...');
        await Parameter.create({
          name: 'accountantEmail',
          displayName: 'Email du Comptable',
          stringValue: process.env.ACCOUNTANT_EMAIL || 'phimjc@gmail.com',
          kmValue: -1
        });
        console.log('‚úÖ Param√®tre accountantEmail cr√©√©');
        // Utiliser la valeur par d√©faut
        accountantEmail = process.env.ACCOUNTANT_EMAIL || 'phimjc@gmail.com';
      }
      
      // Envoyer l'email au comptable
      if (accountantEmail) {
        console.log('üìß Envoi email comptable √†:', accountantEmail);
        const accountantResult = await emailService.sendToAccountant(sickLeave, accountantEmail);
        if (accountantResult.success) {
          console.log('‚úÖ Email comptable envoy√©:', accountantResult.messageId);
        } else {
          console.log('‚ö†Ô∏è Email comptable non envoy√©:', accountantResult.error);
        }
      } else {
        console.log('‚ö†Ô∏è Email comptable non configur√©');
      }
    } catch (accountantError) {
      console.error('‚ùå Erreur envoi email comptable:', accountantError.message);
    }

    res.json({
      success: true,
      message: 'Arr√™t maladie valid√© avec succ√®s',
      data: sickLeave
    });

  } catch (error) {
    console.error('‚ùå Erreur validation arr√™t maladie:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la validation de l\'arr√™t maladie'
    });
  }
};

// Rejeter un arr√™t maladie (admin)
const rejectSickLeave = async (req, res) => {
  try {
    const { id } = req.params;
    const { rejectedBy, reason } = req.body;

    const sickLeave = await SickLeave.findById(id);
    
    if (!sickLeave) {
      return res.status(404).json({
        success: false,
        error: 'Arr√™t maladie non trouv√©'
      });
    }

    if (sickLeave.status !== 'pending') {
      return res.status(400).json({
        success: false,
        error: 'Cet arr√™t maladie a d√©j√† √©t√© trait√©'
      });
    }

    // Marquer comme rejet√©
    await sickLeave.markAsRejected(rejectedBy, reason);

    // Supprimer l'absence si elle a √©t√© cr√©√©e automatiquement
    try {
      const absenceResult = await absenceService.removeAbsenceFromSickLeave(sickLeave._id);
      if (absenceResult.success) {
        console.log('‚úÖ Absence supprim√©e:', absenceResult.message);
      }
    } catch (absenceError) {
      console.error('‚ùå Erreur suppression absence:', absenceError.message);
      // Continuer m√™me si la suppression √©choue
    }

    // Envoyer un email de rejet au salari√©
    try {
      const emailResult = await emailService.sendSickLeaveRejection(sickLeave, reason, rejectedBy);
      if (emailResult.success) {
        console.log('‚úÖ Email de rejet envoy√©:', emailResult.messageId);
      } else {
        console.log('‚ö†Ô∏è Email de rejet non envoy√©:', emailResult.error);
      }
    } catch (emailError) {
      console.error('‚ùå Erreur envoi email rejet:', emailError.message);
      // Continuer m√™me si l'email √©choue
    }

    res.json({
      success: true,
      message: 'Arr√™t maladie rejet√©',
      data: sickLeave
    });

  } catch (error) {
    console.error('‚ùå Erreur rejet arr√™t maladie:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erreur lors du rejet de l\'arr√™t maladie'
    });
  }
};

// Marquer comme d√©clar√© (admin)
const markAsDeclared = async (req, res) => {
  try {
    const { id } = req.params;
    const { declaredBy, notes } = req.body;

    const sickLeave = await SickLeave.findById(id);
    
    if (!sickLeave) {
      return res.status(404).json({
        success: false,
        error: 'Arr√™t maladie non trouv√©'
      });
    }

    if (sickLeave.status !== 'validated') {
      return res.status(400).json({
        success: false,
        error: 'L\'arr√™t maladie doit √™tre valid√© avant d\'√™tre d√©clar√©'
      });
    }

    // Marquer comme d√©clar√©
    await sickLeave.markAsDeclared(declaredBy, notes);

    // D√©placer le fichier vers le dossier d√©clar√©
    try {
      const newPath = await sftpService.moveFile(sickLeave.filePath, 'declared');
      sickLeave.filePath = newPath;
      await sickLeave.save();
    } catch (error) {
      console.error('‚ùå Erreur d√©placement fichier:', error.message);
      // Continuer m√™me si le d√©placement √©choue
    }

    // Envoyer un email au comptable
    try {
      // R√©cup√©rer l'email du comptable depuis les param√®tres
      const Parameter = require('../models/Parameters');
      const accountantEmailParam = await Parameter.findOne({ name: 'accountantEmail' });
      
      if (accountantEmailParam && accountantEmailParam.stringValue) {
        const emailResult = await emailService.sendToAccountant(sickLeave, accountantEmailParam.stringValue);
        if (emailResult.success) {
          console.log('‚úÖ Email au comptable envoy√©:', emailResult.messageId);
        } else {
          console.log('‚ö†Ô∏è Email au comptable non envoy√©:', emailResult.error);
        }
      } else {
        console.log('‚ö†Ô∏è Email du comptable non configur√©');
      }
    } catch (emailError) {
      console.error('‚ùå Erreur envoi email comptable:', emailError.message);
      // Continuer m√™me si l'email √©choue
    }

    res.json({
      success: true,
      message: 'Arr√™t maladie marqu√© comme d√©clar√©',
      data: sickLeave
    });

  } catch (error) {
    console.error('‚ùå Erreur d√©claration arr√™t maladie:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la d√©claration de l\'arr√™t maladie'
    });
  }
};

// T√©l√©charger un fichier (admin)
const downloadFile = async (req, res) => {
  try {
    const { id } = req.params;
    
    const sickLeave = await SickLeave.findById(id);
    
    if (!sickLeave) {
      return res.status(404).json({
        success: false,
        error: 'Arr√™t maladie non trouv√©'
      });
    }

    // T√©l√©charger le fichier depuis le NAS
    let fileBuffer;
    try {
      console.log('üì• Tentative de t√©l√©chargement:', sickLeave.filePath);
      fileBuffer = await sftpService.downloadFile(sickLeave.filePath);
      console.log('‚úÖ Fichier t√©l√©charg√© avec succ√®s, taille:', fileBuffer.length);
    } catch (error) {
      console.error('‚ùå Erreur t√©l√©chargement fichier:', error.message);
      
      // Si le fichier n'est pas trouv√© au chemin enregistr√©, essayer le chemin de l'ancien format
      if (error.message.includes('No such file') || error.message.includes('ENOENT')) {
        console.log('‚ö†Ô∏è Fichier non trouv√© au chemin enregistr√©, essai avec l\'ancien format...');
        
        // Extraire le nom du fichier du chemin
        const fileName = sickLeave.filePath.split('/').pop();
        const year = new Date(sickLeave.uploadDate).getFullYear();
        
        // Essayer le chemin de l'ancien format (directement dans le dossier ann√©e)
        const oldFormatPath = `/n8n/sick-leaves/${year}/${fileName}`;
        console.log(`üîÑ Essai avec l'ancien format: ${oldFormatPath}`);
        
        try {
          fileBuffer = await sftpService.downloadFile(oldFormatPath);
          console.log('‚úÖ Fichier trouv√© avec l\'ancien format, taille:', fileBuffer.length);
        } catch (oldFormatError) {
          console.error('‚ùå Fichier non trouv√© m√™me avec l\'ancien format:', oldFormatError.message);
          
          // Retourner une erreur plus claire
          return res.status(404).json({
            success: false,
            error: 'Fichier non trouv√© sur le serveur. Le fichier a peut-√™tre √©t√© supprim√© ou d√©plac√©.',
            details: {
              originalPath: sickLeave.filePath,
              alternativePath: oldFormatPath,
              fileName: sickLeave.originalFileName
            }
          });
        }
      } else {
        // Autre erreur (connexion, permissions, etc.)
        console.error('‚ùå Erreur de t√©l√©chargement:', error.message);
        return res.status(500).json({
          success: false,
          error: 'Erreur lors du t√©l√©chargement du fichier',
          details: error.message
        });
      }
    }

    res.set({
      'Content-Type': sickLeave.fileType,
      'Content-Disposition': `attachment; filename="${sickLeave.originalFileName}"`,
      'Content-Length': fileBuffer.length
    });

    res.send(fileBuffer);

  } catch (error) {
    console.error('‚ùå Erreur t√©l√©chargement fichier:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erreur lors du t√©l√©chargement du fichier'
    });
  }
};

// Obtenir les statistiques
const getStats = async (req, res) => {
  try {
    const [stats, overdueCount] = await Promise.all([
      SickLeave.getStats(),
      SickLeave.getOverdueCount()
    ]);

    res.json({
      success: true,
      data: {
        ...stats,
        overdue: overdueCount
      }
    });

  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration statistiques:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la r√©cup√©ration des statistiques'
    });
  }
};

// Supprimer un arr√™t maladie (admin)
const deleteSickLeave = async (req, res) => {
  try {
    const { id } = req.params;
    
    const sickLeave = await SickLeave.findById(id);
    
    if (!sickLeave) {
      return res.status(404).json({
        success: false,
        error: 'Arr√™t maladie non trouv√©'
      });
    }

    // Supprimer le fichier du NAS
    try {
      await sftpService.deleteFile(sickLeave.filePath);
    } catch (error) {
      console.error('‚ùå Erreur suppression fichier:', error.message);
      // Continuer m√™me si la suppression du fichier √©choue
    }

    // Supprimer de la base de donn√©es
    await SickLeave.findByIdAndDelete(id);

    res.json({
      success: true,
      message: 'Arr√™t maladie supprim√© avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur suppression arr√™t maladie:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la suppression de l\'arr√™t maladie'
    });
  }
};

// Test de la configuration email
const testEmailConfiguration = async (req, res) => {
  try {
    console.log('üìß Test de la configuration email...');
    
    const emailConfig = {
      smtpHost: process.env.SMTP_HOST || 'smtp.gmail.com',
      smtpPort: process.env.SMTP_PORT || '587',
      smtpUser: process.env.SMTP_USER || process.env.EMAIL_USER,
      smtpPass: process.env.SMTP_PASS || process.env.EMAIL_PASSWORD,
      configured: !!(process.env.SMTP_USER || process.env.EMAIL_USER) && !!(process.env.SMTP_PASS || process.env.EMAIL_PASSWORD),
      nodemailerAvailable: !!require('nodemailer'),
      nodeModulesPath: require.resolve('nodemailer')
    };

    // V√©rifier la connexion SMTP
    const connectionResult = await emailService.verifyConnection();
    
    res.json({
      success: true,
      message: 'Test de configuration email termin√©',
      config: {
        ...emailConfig,
        smtpPass: emailConfig.smtpPass ? '***' + emailConfig.smtpPass.slice(-3) : 'Non configur√©',
        connectionTest: connectionResult
      },
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Erreur test configuration email:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erreur lors du test de configuration email'
    });
  }
};

// Supprimer tous les arr√™ts maladie (admin uniquement)
const deleteAllSickLeaves = async (req, res) => {
  try {
    console.log('üóëÔ∏è Suppression de tous les arr√™ts maladie...');
    
    // Compter les arr√™ts maladie avant suppression
    const count = await SickLeave.countDocuments();
    
    if (count === 0) {
      return res.json({
        success: true,
        message: 'Aucun arr√™t maladie √† supprimer',
        deletedCount: 0
      });
    }
    
    // Supprimer tous les arr√™ts maladie de la base de donn√©es
    // NOTE: On ne supprime PAS les fichiers du NAS pour des raisons l√©gales
    const result = await SickLeave.deleteMany({});
    
    console.log(`‚úÖ ${result.deletedCount} arr√™ts maladie supprim√©s de la base de donn√©es`);
    console.log('‚ö†Ô∏è Les fichiers sur le NAS sont conserv√©s pour des raisons l√©gales');
    
    res.json({
      success: true,
      message: `${result.deletedCount} arr√™ts maladie supprim√©s de la base de donn√©es`,
      deletedCount: result.deletedCount,
      note: 'Les fichiers sur le NAS sont conserv√©s'
    });

  } catch (error) {
    console.error('‚ùå Erreur suppression tous les arr√™ts maladie:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la suppression des arr√™ts maladie'
    });
  }
};

// Modifier les dates d'un arr√™t maladie
const updateSickLeave = async (req, res) => {
  try {
    const { id } = req.params;
    const { startDate, endDate } = req.body;

    console.log('üìù Modification arr√™t maladie:', { id, startDate, endDate });

    // Validation des dates
    if (!startDate || !endDate) {
      return res.status(400).json({
        success: false,
        error: 'Les dates de d√©but et de fin sont requises'
      });
    }

    // V√©rifier que la date de fin est apr√®s la date de d√©but
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    if (end < start) {
      return res.status(400).json({
        success: false,
        error: 'La date de fin doit √™tre apr√®s la date de d√©but'
      });
    }

    // Calculer la dur√©e
    const duration = Math.ceil((end - start) / (1000 * 60 * 60 * 24)) + 1;

    // Mettre √† jour l'arr√™t maladie
    const updatedSickLeave = await SickLeave.findByIdAndUpdate(
      id,
      {
        startDate: new Date(startDate),
        endDate: new Date(endDate),
        duration: duration,
        updatedAt: new Date()
      },
      { new: true }
    );

    if (!updatedSickLeave) {
      return res.status(404).json({
        success: false,
        error: 'Arr√™t maladie non trouv√©'
      });
    }

    console.log('‚úÖ Arr√™t maladie modifi√©:', updatedSickLeave._id);

    res.json({
      success: true,
      message: 'Dates modifi√©es avec succ√®s',
      data: updatedSickLeave
    });

  } catch (error) {
    console.error('‚ùå Erreur modification arr√™t maladie:', error.message);
    res.status(500).json({
      success: false,
      error: 'Erreur lors de la modification des dates'
    });
  }
};

module.exports = {
  uploadMiddleware,
  testSftpConnection,
  testUpload,
  testEmailConfiguration,
  uploadSickLeave,
  getAllSickLeaves,
  getSickLeaveById,
  validateSickLeave,
  rejectSickLeave,
  markAsDeclared,
  updateSickLeave,
  downloadFile,
  getStats,
  deleteSickLeave,
  deleteAllSickLeaves
};
