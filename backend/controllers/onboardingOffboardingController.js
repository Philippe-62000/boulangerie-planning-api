const OnboardingOffboarding = require('../models/OnboardingOffboarding');
const Employee = require('../models/Employee');

// R√©cup√©rer les d√©marches pour un employ√©
exports.getByEmployeeId = async (req, res) => {
  try {
    const { employeeId } = req.params;
    
    console.log('üìã R√©cup√©ration d√©marches pour employ√©:', employeeId);
    
    const record = await OnboardingOffboarding.getByEmployeeId(employeeId);
    
    if (!record) {
      console.log('‚ö†Ô∏è Aucune d√©marche trouv√©e, cr√©ation d\'un enregistrement vide');
      
      // R√©cup√©rer le nom de l'employ√©
      const employee = await Employee.findById(employeeId);
      if (!employee) {
        return res.status(404).json({
          success: false,
          message: 'Employ√© non trouv√©'
        });
      }
      
      // Cr√©er un enregistrement vide
      const newRecord = await OnboardingOffboarding.create({
        employeeId,
        employeeName: employee.name,
        onboarding: {},
        offboarding: {}
      });
      
      return res.json({
        success: true,
        data: newRecord
      });
    }
    
    console.log('‚úÖ D√©marches trouv√©es:', record._id);
    
    res.json({
      success: true,
      data: record
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des d√©marches:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des d√©marches',
      error: error.message
    });
  }
};

// Cr√©er ou mettre √† jour les d√©marches
exports.createOrUpdate = async (req, res) => {
  try {
    const { employeeId, employeeName, onboarding, offboarding, entryDate, exitDate } = req.body;
    
    console.log('üíæ Sauvegarde d√©marches pour:', employeeName);
    console.log('üìä Donn√©es re√ßues:', { onboarding, offboarding });
    
    if (!employeeId) {
      return res.status(400).json({
        success: false,
        message: 'employeeId est requis'
      });
    }
    
    const data = {
      employeeName,
      onboarding: onboarding || {},
      offboarding: offboarding || {},
      entryDate: entryDate || null,
      exitDate: exitDate || null
    };
    
    const record = await OnboardingOffboarding.createOrUpdate(employeeId, employeeName, data);
    
    console.log('‚úÖ D√©marches sauvegard√©es:', record._id);
    
    res.json({
      success: true,
      message: 'D√©marches sauvegard√©es avec succ√®s',
      data: record
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la sauvegarde des d√©marches:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la sauvegarde des d√©marches',
      error: error.message
    });
  }
};

// R√©cup√©rer toutes les d√©marches
exports.getAll = async (req, res) => {
  try {
    console.log('üìã R√©cup√©ration de toutes les d√©marches');
    
    const records = await OnboardingOffboarding.find({ isActive: true })
      .populate('employeeId', 'name email')
      .sort({ createdAt: -1 });
    
    console.log(`‚úÖ ${records.length} d√©marches r√©cup√©r√©es`);
    
    res.json({
      success: true,
      data: records
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des d√©marches:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des d√©marches',
      error: error.message
    });
  }
};

// R√©cup√©rer les obligations l√©gales en attente
exports.getPendingLegalObligations = async (req, res) => {
  try {
    console.log('‚ö†Ô∏è R√©cup√©ration des obligations l√©gales en attente');
    
    const pendingObligations = await OnboardingOffboarding.getPendingLegalObligations();
    
    console.log(`‚úÖ ${pendingObligations.length} obligations en attente`);
    
    res.json({
      success: true,
      data: pendingObligations
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des obligations l√©gales:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des obligations l√©gales',
      error: error.message
    });
  }
};

// Supprimer les d√©marches d'un employ√©
exports.deleteByEmployeeId = async (req, res) => {
  try {
    const { employeeId } = req.params;
    
    console.log('üóëÔ∏è Suppression d√©marches pour employ√©:', employeeId);
    
    const result = await OnboardingOffboarding.findOneAndUpdate(
      { employeeId },
      { isActive: false },
      { new: true }
    );
    
    if (!result) {
      return res.status(404).json({
        success: false,
        message: 'D√©marches non trouv√©es'
      });
    }
    
    console.log('‚úÖ D√©marches d√©sactiv√©es:', result._id);
    
    res.json({
      success: true,
      message: 'D√©marches supprim√©es avec succ√®s'
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression des d√©marches:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la suppression des d√©marches',
      error: error.message
    });
  }
};

