const Employee = require('../models/Employee');
const Absence = require('../models/Absence');

// Obtenir tous les employ√©s avec leurs absences
exports.getAllEmployees = async (req, res) => {
  try {
    // R√©cup√©rer les employ√©s actifs
    const employees = await Employee.find({ isActive: true })
      .sort({ name: 1 });
    
    // R√©cup√©rer les absences pour chaque employ√©
    const employeesWithAbsences = await Promise.all(
      employees.map(async (employee) => {
        // R√©cup√©rer les absences actuelles et futures de l'employ√©
        const absences = await Absence.find({ 
          employeeId: employee._id,
          endDate: { $gte: new Date() } // Absences qui ne sont pas encore termin√©es
        }).sort({ startDate: 1 });
        
        // S√©parer les diff√©rents types d'absences
        const currentAbsences = absences.filter(a => 
          a.startDate <= new Date() && a.endDate >= new Date()
        );
        
        const futureAbsences = absences.filter(a => 
          a.startDate > new Date()
        );
        
        return {
          ...employee.toObject(),
          absences: {
            current: currentAbsences.filter(a => a.type === 'ABS'),
            future: futureAbsences.filter(a => a.type === 'ABS'),
            all: absences.filter(a => a.type === 'ABS')
          },
          sickLeaves: {
            current: currentAbsences.filter(a => a.type === 'MAL'),
            future: futureAbsences.filter(a => a.type === 'MAL'),
            all: absences.filter(a => a.type === 'MAL')
          },
          delays: {
            current: currentAbsences.filter(a => a.type === 'RET'),
            future: futureAbsences.filter(a => a.type === 'RET'),
            all: absences.filter(a => a.type === 'RET')
          },
          totalAbsences: absences.length
        };
      })
    );
    
    console.log(`üìä ${employeesWithAbsences.length} employ√©s r√©cup√©r√©s avec leurs absences`);
    res.json({ 
      success: true, 
      data: employeesWithAbsences 
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des employ√©s:', error);
    res.status(500).json({ error: error.message });
  }
};

// Obtenir un employ√© par ID
exports.getEmployeeById = async (req, res) => {
  try {
    const employee = await Employee.findById(req.params.id);
    if (!employee) {
      return res.status(404).json({ error: 'Employ√© non trouv√©' });
    }
    res.json(employee);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Cr√©er un nouvel employ√©
exports.createEmployee = async (req, res) => {
  try {
    const employee = new Employee(req.body);
    await employee.save();
    res.status(201).json(employee);
  } catch (error) {
    if (error.name === 'ValidationError') {
      return res.status(400).json({ error: error.message });
    }
    res.status(500).json({ error: error.message });
  }
};

// Mettre √† jour un employ√©
exports.updateEmployee = async (req, res) => {
  try {
    console.log('Update employee - ID:', req.params.id);
    console.log('Update employee - Body:', req.body);
    
    const employee = await Employee.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );
    if (!employee) {
      return res.status(404).json({ error: 'Employ√© non trouv√©' });
    }
    console.log('Employee updated:', employee);
    res.json(employee);
  } catch (error) {
    console.error('Error updating employee:', error);
    if (error.name === 'ValidationError') {
      return res.status(400).json({ error: error.message });
    }
    res.status(500).json({ error: error.message });
  }
};

// D√©sactiver un employ√© (soft delete)
exports.deactivateEmployee = async (req, res) => {
  try {
    const employee = await Employee.findByIdAndUpdate(
      req.params.id,
      { isActive: false },
      { new: true }
    );
    if (!employee) {
      return res.status(404).json({ error: 'Employ√© non trouv√©' });
    }
    res.json({ message: 'Employ√© d√©sactiv√© avec succ√®s' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// R√©activer un employ√©
exports.reactivateEmployee = async (req, res) => {
  try {
    const employee = await Employee.findByIdAndUpdate(
      req.params.id,
      { isActive: true },
      { new: true }
    );
    if (!employee) {
      return res.status(404).json({ error: 'Employ√© non trouv√©' });
    }
    res.json(employee);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Supprimer d√©finitivement un employ√©
exports.deleteEmployee = async (req, res) => {
  try {
    const employee = await Employee.findByIdAndDelete(req.params.id);
    if (!employee) {
      return res.status(404).json({ error: 'Employ√© non trouv√©' });
    }
    res.json({ message: 'Employ√© supprim√© d√©finitivement' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// D√©clarer un arr√™t maladie
exports.declareSickLeave = async (req, res) => {
  try {
    const { startDate, endDate } = req.body;
    
    const employee = await Employee.findByIdAndUpdate(
      req.params.id,
      {
        sickLeave: {
          isOnSickLeave: true,
          startDate: new Date(startDate),
          endDate: new Date(endDate)
        }
      },
      { new: true, runValidators: true }
    );
    
    if (!employee) {
      return res.status(404).json({ error: 'Employ√© non trouv√©' });
    }
    
    res.json(employee);
  } catch (error) {
    if (error.name === 'ValidationError') {
      return res.status(400).json({ error: error.message });
    }
    res.status(500).json({ error: error.message });
  }
};

